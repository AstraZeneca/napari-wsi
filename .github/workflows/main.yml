name: CI

on:
  push:
    branches:
      - main
    tags:
      - 'v*'
  pull_request:
    branches:
      - main
  workflow_dispatch:

env:
  POETRY_VERSION: 1.3.2

jobs:
  check:
    name: Check
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Install poetry
        run: pipx install poetry==$POETRY_VERSION

      - name: Set up python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'poetry'

      - name: Install dependencies
        run: poetry install

      - name: Run checks
        run: poetry run invoke check

  test:
    needs: [check]
    name: Test py${{ matrix.python-version }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10']

    steps:
      - uses: actions/checkout@v3

      - name: Install poetry
        run: pipx install poetry==$POETRY_VERSION

      - name: Set up python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'poetry'

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install qtbase5-dev xvfb
          poetry install
          poetry run pip install pyqt5

      - name: Run tests
        run: poetry run xvfb-run invoke test

  release:
    needs: [test]
    name: Release
    runs-on: ubuntu-latest
    if: contains(github.ref, 'tags')

    steps:
      - uses: actions/checkout@v3

      - name: Install poetry
        run: pipx install poetry==$POETRY_VERSION

      - name: Set up python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Build distribution
        run: poetry build

      - name: Create release
        run: |
          VERSION="${GITHUB_REF/refs\/tags\/}" 
          if [[ "$VERSION" != *"rc"* ]]; then
            gh release create $VERSION --verify-tag --generate-notes
          else
            gh release create $VERSION --verify-tag --generate-notes --prerelease
          fi
          gh release upload $VERSION dist/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
